// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: productsQueries.sql

package database

import (
	"context"
)

const createProduct = `-- name: CreateProduct :exec
INSERT INTO products (
    sku,
    name,
    description,
    price,
    image,
    stock_quantity,
    tax_percetange
) VALUES ($1, $2, $3, $4, $5, $6, $7)
`

type CreateProductParams struct {
	Sku           string
	Name          string
	Description   string
	Price         float64
	Image         string
	StockQuantity int32
	TaxPercetange int32
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) error {
	_, err := q.db.Exec(ctx, createProduct,
		arg.Sku,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.Image,
		arg.StockQuantity,
		arg.TaxPercetange,
	)
	return err
}

const getProducts = `-- name: GetProducts :many
SELECT id, sku, name, description, price, image, stock_quantity, tax_percetange FROM products
`

func (q *Queries) GetProducts(ctx context.Context) ([]Product, error) {
	rows, err := q.db.Query(ctx, getProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Sku,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.Image,
			&i.StockQuantity,
			&i.TaxPercetange,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
